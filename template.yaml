AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  project10

  Sample SAM Template for prject6

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  Stage: 
    Type: String
  MainStackName:
    Type: String
  tableDDBName:
    Type: String

Resources:

  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${tableDDBName}
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt DDBTable.Arn

  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: SingleTableApi
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      UserPoolConfig:
        UserPoolId: !Ref CognitoAuthorizerUserPool
        AwsRegion: eu-west-1
        DefaultAction: DENY
  
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

  DDBDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      Name: SingleTableDataSource
      ApiId: !GetAtt AppSyncApi.ApiId
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DDBTable
        AwsRegion: !Sub ${AWS::Region}

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId     
      DefinitionS3Location: hello-world/GraphQL/GraphQLSchema/Schema.graphql

  GetParentAndChildResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getParentWithChildren
      DataSourceName: !GetAtt DDBDataSource.Name
      RequestMappingTemplateS3Location: hello-world/GraphQL/Resolver/GetParentAndChildResolver/Request.vtl
      ResponseMappingTemplateS3Location: hello-world/GraphQL/Resolver/GetParentAndChildResolver/Response.vtl

  CreateParentMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createParentItem
      DataSourceName: !GetAtt DDBDataSource.Name
      RequestMappingTemplateS3Location: hello-world/GraphQL/Resolver/CreateParentMutationResolver/Request.vtl
      ResponseMappingTemplateS3Location: hello-world/GraphQL/Resolver/CreateParentMutationResolver/Response.vtl

  CreateChildMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createChildItem
      DataSourceName: !GetAtt DDBDataSource.Name
      RequestMappingTemplateS3Location: hello-world/GraphQL/Resolver/CreateChildMutationResolver/Request.vtl
      ResponseMappingTemplateS3Location: hello-world/GraphQL/Resolver/CreateChildMutationResolver/Response.vtl

  CognitoAuthorizerUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties: 
      UserPoolName: cognito-user-pool-userpool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      UserPoolId: !Ref CognitoAuthorizerUserPool


  LambdaSignUpFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: hello-world/Lambda_handler
      Handler: app.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events: 
        MyEvent:
          Type: Cognito
          Properties:  
            Trigger: 
              - CustomMessage
            UserPool: !Ref CognitoAuthorizerUserPool
    

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  